//
//  Levels.swift
//  Shape Slide
//
//  Created by 90307332 on 3/10/20.
//  Copyright Â© 2020 Ishan Shetty. All rights reserved.
//

import Foundation

class Levels {
    
    private static let levelLayouts = [
        [ // MARK: Level 0
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [2, 0, 3, 0],
            [0, 0, 0, 0],
        ],
        [ // MARK: Level 1
            [0, 0, 0, 0],
            [2, 0, 3, 0],
            [2, 0, 0, 2],
            [0, 0, 0, 0],
        ],
        [ // MARK: Level 2
            [0, 0, 0, 0],
            [0, 0, 0, 2],
            [3, 2, 2, 3],
            [0, 0, 0, 0],
        ],
        [ // MARK: Level 3
            [0, 2, 1, 1],
            [0, 0, 0, 1],
            [0, 0, 0, 0],
            [1, 2, 0, 3],
        ],
        [ // MARK: Level 4
            [1, 1, 1, 3],
            [2, 1, 0, 0],
            [0, 0, 0, 0],
            [3, 3, 3, 3]
        ],
        [ // MARK: Level 5
            [3, 0, 0, 2],
            [0, 1, 0, 0],
            [0, 0, 1, 0],
            [2, 0, 1, 3]
        ],
        [ // MARK: Level 6
            [2, 1, 0, 0],
            [3, 0, 0, 0],
            [2, 0, 0, 2],
            [0, 1, 0, 0]
        ],
        [ // MARK: Level 7
            [1, 1, 1, 1],
            [2, 3, 1, 1],
            [0, 0, 0, 1],
            [3, 0, 0, 2]
        ],
        [ // MARK: Level 8
            [0, 2, 2, 0],
            [0, 2, 2, 0],
            [0, 3, 3, 0],
            [0, 3, 3, 0]
        ],
        [ // MARK: Level 9
            [2, 2, 2, 3],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [2, 3, 3, 3]
        ],
        [ // MARK: Level 10
            [2, 2, 2, 2],
            [3, 0, 0, 2],
            [1, 0, 1, 3],
            [0, 2, 3, 2]
        ],
        [ // MARK: Level 11
            [3, 3, 0, 3],
            [3, 0, 3, 0],
            [0, 2, 0, 3],
            [3, 0, 3, 3]
        ],
        [ // MARK: Level 12
            [2, 2, 0, 3],
            [2, 3, 0, 2],
            [0, 2, 2, 0],
            [3, 3, 0, 1]
        ],
        [ // MARK: Level 13
            [2, 0, 0, 4],
            [1, 1, 1, 0],
            [4, 0, 4, 0],
            [4, 0, 0, 3]
        ],
        [ // MARK: Level 14
            [4, 0, 0, 4],
            [0, 4, 1, 0],
            [2, 4, 3, 2],
            [0, 0, 0, 4]
        ],
        [ // MARK: Level 15
            [2, 1, 2, 2],
            [3, 4, 4, 3],
            [0, 4, 0, 2],
            [0, 3, 2, 1]
        ],
        [ // MARK: Level 16
            [3, 0, 4, 2],
            [4, 1, 0, 0],
            [1, 2, 2, 2],
            [3, 4, 2, 3]
        ],
        [ // MARK: Level 17
            [2, 3, 4, 0],
            [0, 2, 3, 4],
            [2, 3, 4, 0],
            [0, 2, 3, 4]
        ],
        [ // MARK: Level 18
            [1, 1, 4, 3],
            [3, 0, 2, 4],
            [3, 2, 0, 0],
            [4, 4, 1, 4]
        ],
        [ // MARK: Level 19
            [2, 3, 4, 2],
            [4, 3, 0, 3],
            [3, 0, 1, 4],
            [2, 4, 3, 2]
        ],
        [ // MARK: Level 20
            [2, 2, 4, 1],
            [4, 1, 2, 3],
            [4, 0, 0, 4],
            [1, 0, 2, 3]
        ],
        [ // MARK: Level 21
            [0, 4, 0, 4],
            [0, 3, 2, 3],
            [4, 2, 3, 0],
            [4, 0, 2, 4]
        ],
        [ // MARK: Level 22
            [2, 3, 2, 3],
            [3, 2, 3, 2],
            [2, 3, 2, 3],
            [3, 2, 3, 2]
        ],
        [ // MARK: Level 23
            [4, 0, 3, 4],
            [2, 2, 3, 0],
            [0, 3, 2, 2],
            [2, 4, 0, 4]
        ],
        [ // MARK: Level 24
            [4, 1, 0, 2],
            [3, 2, 3, 0],
            [0, 4, 0, 3],
            [3, 3, 4, 4]
        ],
        [ // MARK: Level 25
            [4, 1, 3, 1],
            [3, 4, 2, 4],
            [2, 4, 1, 4],
            [2, 3, 3, 3]
        ],
        [ // MARK: Level 26
            [1, 0, 2, 4],
            [2, 0, 0, 5],
            [0, 4, 1, 0],
            [0, 2, 0, 4]
        ],
        [ // MARK: Level 27
            [1, 4, 5, 2],
            [3, 0, 4, 1],
            [0, 1, 0, 2],
            [4, 0, 3, 4]
        ],
        [ // MARK: Level 28              I AM HERE
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 29
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 30
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 31
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 32
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 33
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 34
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 35
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 36
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 37
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 38
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 39
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 40
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 41
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 42
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 43
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 44
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 45
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 46
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 47
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 48
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 49
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        [ // MARK: Level 50
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    ]
    
    // MARK: Layout Manager
    // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- //

    public static func getLayout(num: Int) -> [[Int]] {
        return rotateLayout(layout: Levels.levelLayouts[num])
    }
    
    public static func amount() -> Int {
        return levelLayouts.count
    }
    
    // MARK: Helper Functions
    // ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- //
    
    /*
     * Rotates the 2D array so that it appears the same in code
     * and on the app. (Easier to develop levels)
     */
    private static func rotateLayout(layout: [[Int]]) -> [[Int]] {
        var rotated = [[Int]]()
        for y in 0 ..< layout[0].count {
            var row = [Int]()
            for x in 0 ..< layout.count {
                row.append(layout[x][y])
            }
            rotated.append(row)
        }
        
        return rotated.map({
            $0.reversed()
        })
    }
}
